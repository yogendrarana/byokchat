/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'
import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as PricingRouteRouteImport } from './routes/pricing/route'
import { Route as ChatRouteRouteImport } from './routes/chat/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as PricingIndexRouteImport } from './routes/pricing/index'
import { Route as ChatIndexRouteImport } from './routes/chat/index'
import { Route as SettingsProvidersIndexRouteImport } from './routes/settings/providers/index'
import { Route as SettingsPreferencesIndexRouteImport } from './routes/settings/preferences/index'
import { Route as ChatIdIndexRouteImport } from './routes/chat/$id/index'
import { ServerRoute as ApiKeysIdServerRouteImport } from './routes/api/keys/$id'
import { ServerRoute as ApiChatIdServerRouteImport } from './routes/api/chat/$id'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const AuthRegisterRouteLazyRouteImport = createFileRoute('/auth/register')()
const AuthLoginRouteLazyRouteImport = createFileRoute('/auth/login')()
const AuthRegisterIndexLazyRouteImport = createFileRoute('/auth/register/')()
const AuthLoginIndexLazyRouteImport = createFileRoute('/auth/login/')()
const rootServerRouteImport = createServerRootRoute()

const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const PricingRouteRoute = PricingRouteRouteImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRouteRoute = ChatRouteRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const PricingIndexRoute = PricingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PricingRouteRoute,
} as any)
const ChatIndexRoute = ChatIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChatRouteRoute,
} as any)
const AuthRegisterRouteLazyRoute = AuthRegisterRouteLazyRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/auth/register/route.lazy').then((d) => d.Route),
)
const AuthLoginRouteLazyRoute = AuthLoginRouteLazyRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/auth/login/route.lazy').then((d) => d.Route),
)
const AuthRegisterIndexLazyRoute = AuthRegisterIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRegisterRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/auth/register/index.lazy').then((d) => d.Route),
)
const AuthLoginIndexLazyRoute = AuthLoginIndexLazyRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthLoginRouteLazyRoute,
} as any).lazy(() =>
  import('./routes/auth/login/index.lazy').then((d) => d.Route),
)
const SettingsProvidersIndexRoute = SettingsProvidersIndexRouteImport.update({
  id: '/providers/',
  path: '/providers/',
  getParentRoute: () => SettingsRouteRoute,
} as any)
const SettingsPreferencesIndexRoute =
  SettingsPreferencesIndexRouteImport.update({
    id: '/preferences/',
    path: '/preferences/',
    getParentRoute: () => SettingsRouteRoute,
  } as any)
const ChatIdIndexRoute = ChatIdIndexRouteImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => ChatRouteRoute,
} as any)
const ApiKeysIdServerRoute = ApiKeysIdServerRouteImport.update({
  id: '/api/keys/$id',
  path: '/api/keys/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiChatIdServerRoute = ApiChatIdServerRouteImport.update({
  id: '/api/chat/$id',
  path: '/api/chat/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/pricing': typeof PricingRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRouteLazyRouteWithChildren
  '/auth/register': typeof AuthRegisterRouteLazyRouteWithChildren
  '/chat/': typeof ChatIndexRoute
  '/pricing/': typeof PricingIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/chat/$id': typeof ChatIdIndexRoute
  '/settings/preferences': typeof SettingsPreferencesIndexRoute
  '/settings/providers': typeof SettingsProvidersIndexRoute
  '/auth/login/': typeof AuthLoginIndexLazyRoute
  '/auth/register/': typeof AuthRegisterIndexLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat': typeof ChatIndexRoute
  '/pricing': typeof PricingIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/chat/$id': typeof ChatIdIndexRoute
  '/settings/preferences': typeof SettingsPreferencesIndexRoute
  '/settings/providers': typeof SettingsProvidersIndexRoute
  '/auth/login': typeof AuthLoginIndexLazyRoute
  '/auth/register': typeof AuthRegisterIndexLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/pricing': typeof PricingRouteRouteWithChildren
  '/settings': typeof SettingsRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRouteLazyRouteWithChildren
  '/auth/register': typeof AuthRegisterRouteLazyRouteWithChildren
  '/chat/': typeof ChatIndexRoute
  '/pricing/': typeof PricingIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/chat/$id/': typeof ChatIdIndexRoute
  '/settings/preferences/': typeof SettingsPreferencesIndexRoute
  '/settings/providers/': typeof SettingsProvidersIndexRoute
  '/auth/login/': typeof AuthLoginIndexLazyRoute
  '/auth/register/': typeof AuthRegisterIndexLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/pricing'
    | '/settings'
    | '/auth/login'
    | '/auth/register'
    | '/chat/'
    | '/pricing/'
    | '/settings/'
    | '/chat/$id'
    | '/settings/preferences'
    | '/settings/providers'
    | '/auth/login/'
    | '/auth/register/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat'
    | '/pricing'
    | '/settings'
    | '/chat/$id'
    | '/settings/preferences'
    | '/settings/providers'
    | '/auth/login'
    | '/auth/register'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/pricing'
    | '/settings'
    | '/auth/login'
    | '/auth/register'
    | '/chat/'
    | '/pricing/'
    | '/settings/'
    | '/chat/$id/'
    | '/settings/preferences/'
    | '/settings/providers/'
    | '/auth/login/'
    | '/auth/register/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRouteRoute: typeof ChatRouteRouteWithChildren
  PricingRouteRoute: typeof PricingRouteRouteWithChildren
  SettingsRouteRoute: typeof SettingsRouteRouteWithChildren
  AuthLoginRouteLazyRoute: typeof AuthLoginRouteLazyRouteWithChildren
  AuthRegisterRouteLazyRoute: typeof AuthRegisterRouteLazyRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/chat/$id': typeof ApiChatIdServerRoute
  '/api/keys/$id': typeof ApiKeysIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/chat/$id': typeof ApiChatIdServerRoute
  '/api/keys/$id': typeof ApiKeysIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/chat/$id': typeof ApiChatIdServerRoute
  '/api/keys/$id': typeof ApiKeysIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/chat/$id' | '/api/keys/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/chat/$id' | '/api/keys/$id'
  id: '__root__' | '/api/auth/$' | '/api/chat/$id' | '/api/keys/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiChatIdServerRoute: typeof ApiChatIdServerRoute
  ApiKeysIdServerRoute: typeof ApiKeysIdServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/pricing/': {
      id: '/pricing/'
      path: '/'
      fullPath: '/pricing/'
      preLoaderRoute: typeof PricingIndexRouteImport
      parentRoute: typeof PricingRouteRoute
    }
    '/chat/': {
      id: '/chat/'
      path: '/'
      fullPath: '/chat/'
      preLoaderRoute: typeof ChatIndexRouteImport
      parentRoute: typeof ChatRouteRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register/': {
      id: '/auth/register/'
      path: '/'
      fullPath: '/auth/register/'
      preLoaderRoute: typeof AuthRegisterIndexLazyRouteImport
      parentRoute: typeof AuthRegisterRouteLazyRoute
    }
    '/auth/login/': {
      id: '/auth/login/'
      path: '/'
      fullPath: '/auth/login/'
      preLoaderRoute: typeof AuthLoginIndexLazyRouteImport
      parentRoute: typeof AuthLoginRouteLazyRoute
    }
    '/settings/providers/': {
      id: '/settings/providers/'
      path: '/providers'
      fullPath: '/settings/providers'
      preLoaderRoute: typeof SettingsProvidersIndexRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/settings/preferences/': {
      id: '/settings/preferences/'
      path: '/preferences'
      fullPath: '/settings/preferences'
      preLoaderRoute: typeof SettingsPreferencesIndexRouteImport
      parentRoute: typeof SettingsRouteRoute
    }
    '/chat/$id/': {
      id: '/chat/$id/'
      path: '/$id'
      fullPath: '/chat/$id'
      preLoaderRoute: typeof ChatIdIndexRouteImport
      parentRoute: typeof ChatRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/keys/$id': {
      id: '/api/keys/$id'
      path: '/api/keys/$id'
      fullPath: '/api/keys/$id'
      preLoaderRoute: typeof ApiKeysIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/chat/$id': {
      id: '/api/chat/$id'
      path: '/api/chat/$id'
      fullPath: '/api/chat/$id'
      preLoaderRoute: typeof ApiChatIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ChatRouteRouteChildren {
  ChatIndexRoute: typeof ChatIndexRoute
  ChatIdIndexRoute: typeof ChatIdIndexRoute
}

const ChatRouteRouteChildren: ChatRouteRouteChildren = {
  ChatIndexRoute: ChatIndexRoute,
  ChatIdIndexRoute: ChatIdIndexRoute,
}

const ChatRouteRouteWithChildren = ChatRouteRoute._addFileChildren(
  ChatRouteRouteChildren,
)

interface PricingRouteRouteChildren {
  PricingIndexRoute: typeof PricingIndexRoute
}

const PricingRouteRouteChildren: PricingRouteRouteChildren = {
  PricingIndexRoute: PricingIndexRoute,
}

const PricingRouteRouteWithChildren = PricingRouteRoute._addFileChildren(
  PricingRouteRouteChildren,
)

interface SettingsRouteRouteChildren {
  SettingsIndexRoute: typeof SettingsIndexRoute
  SettingsPreferencesIndexRoute: typeof SettingsPreferencesIndexRoute
  SettingsProvidersIndexRoute: typeof SettingsProvidersIndexRoute
}

const SettingsRouteRouteChildren: SettingsRouteRouteChildren = {
  SettingsIndexRoute: SettingsIndexRoute,
  SettingsPreferencesIndexRoute: SettingsPreferencesIndexRoute,
  SettingsProvidersIndexRoute: SettingsProvidersIndexRoute,
}

const SettingsRouteRouteWithChildren = SettingsRouteRoute._addFileChildren(
  SettingsRouteRouteChildren,
)

interface AuthLoginRouteLazyRouteChildren {
  AuthLoginIndexLazyRoute: typeof AuthLoginIndexLazyRoute
}

const AuthLoginRouteLazyRouteChildren: AuthLoginRouteLazyRouteChildren = {
  AuthLoginIndexLazyRoute: AuthLoginIndexLazyRoute,
}

const AuthLoginRouteLazyRouteWithChildren =
  AuthLoginRouteLazyRoute._addFileChildren(AuthLoginRouteLazyRouteChildren)

interface AuthRegisterRouteLazyRouteChildren {
  AuthRegisterIndexLazyRoute: typeof AuthRegisterIndexLazyRoute
}

const AuthRegisterRouteLazyRouteChildren: AuthRegisterRouteLazyRouteChildren = {
  AuthRegisterIndexLazyRoute: AuthRegisterIndexLazyRoute,
}

const AuthRegisterRouteLazyRouteWithChildren =
  AuthRegisterRouteLazyRoute._addFileChildren(
    AuthRegisterRouteLazyRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRouteRoute: ChatRouteRouteWithChildren,
  PricingRouteRoute: PricingRouteRouteWithChildren,
  SettingsRouteRoute: SettingsRouteRouteWithChildren,
  AuthLoginRouteLazyRoute: AuthLoginRouteLazyRouteWithChildren,
  AuthRegisterRouteLazyRoute: AuthRegisterRouteLazyRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiChatIdServerRoute: ApiChatIdServerRoute,
  ApiKeysIdServerRoute: ApiKeysIdServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
